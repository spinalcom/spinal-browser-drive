{
  "version": 3,
  "sources": [
    "node_modules/browser-pack/_prelude.js",
    "app/app.config.js",
    "app/app.js",
    "app/app.route.js",
    "app/controllers/FileExplorerCtrl.js",
    "app/controllers/InspectorCtrl.js",
    "app/controllers/loginCtrl.js",
    "app/controllers/mainCtrl.js",
    "app/controllers/navbarCtrl.js",
    "app/controllers/sideBarCtrl.js",
    "app/directives/dnd-fileExplorer.js",
    "app/directives/jsTree.directive.js",
    "app/directives/navbar.js",
    "app/directives/spinalInspect.js",
    "app/services/authService.js",
    "app/services/goldenLayoutService.js",
    "app/services/spinalCore.js",
    "app/services/spinalFilesystem.js",
    "app/services/spinalModelDictionary.js"
  ],
  "names": [],
  "mappings": "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",
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function(){function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s}return e})()",
    "angular.module('settings', [])\n  .constant('config', {\n    main_path: '/',\n    spinalhub_url: '127.0.0.1',\n    spinalhub_port: '8888',\n    spinalhub_user: '168',\n  });",
    "angular.module('app.route', ['ngRoute']);\nangular.module('app.services', []);\nangular.module('app.directives', []);\nangular.module('app.controllers', []);\nangular.module('app.spinalcom', ['settings', 'ngMaterial']);\nangular.module('app.spinal-panel', []);\n\n\nangular.module('SpinalApp', ['ngAnimate', 'ngMaterial', 'app.directives', 'app.route',\n    'jsTree.directive', 'app.sidebar', 'app.FileExplorer',\n    'app.services', 'app.controllers', 'ngMdIcons', 'settings', 'app.spinalcom', 'app.spinal-panel',\n  ])\n  .run(['$rootScope', '$location', 'authService', function ($rootScope, $location, authService) {\n    let user = authService.get_user();\n    $rootScope.$on('$routeChangeStart', function (event, next, current) {\n      if (next.$$route.authenticate) {\n        if (!authService.is_Connected()) {\n          authService.login(user.username, user.password)\n            .then(function () {},\n              function () {\n                $location.path('/login');\n              });\n        }\n      }\n    });\n  }])\n\n\n  .config([\"$mdThemingProvider\", function ($mdThemingProvider) {\n    $mdThemingProvider.theme('altTheme')\n      .primaryPalette('grey', {\n        'default': '200'\n      })\n      .accentPalette('grey', {\n        'default': '700'\n      })\n      .dark();\n    $mdThemingProvider.theme('default')\n      .dark();\n\n    $mdThemingProvider.setDefaultTheme('altTheme');\n    $mdThemingProvider.theme(\"error-toast\");\n    $mdThemingProvider.alwaysWatchTheme(true);\n  }]).run([\"$templateCache\", \"$http\", function ($templateCache, $http) {\n    let load_template = (uri, name) => {\n      $http.get(uri).then((response) => {\n        $templateCache.put(name, response.data);\n      }, (errorResponse) => {\n        console.log('Cannot load the file ' + uri);\n      });\n    };\n    let toload = [{\n      uri: 'app/templates/sideBar.html',\n      name: 'sideBar.html'\n    }, {\n      uri: 'app/templates/inspector.html',\n      name: 'inspector.html'\n    }, {\n      uri: 'app/templates/FileExplorer.html',\n      name: 'FileExplorer.html'\n    }, {\n      uri: 'app/templates/changePasswordModal.html',\n      name: 'changePasswordModal.html'\n    }];\n    for (var i = 0; i < toload.length; i++) {\n      load_template(toload[i].uri, toload[i].name);\n    }\n\n    // $templateCache.put('templateId.html', 'This is the content of the template');\n  }]);",
    "angular.module('app.route')\n  .config([\"$routeProvider\", \"$locationProvider\",\n    function ($routeProvider, $locationProvider) {\n      $routeProvider\n        .when(\"/home\", {\n          templateUrl: \"app/templates/main.html\",\n          authenticate: true,\n          controller: 'mainCtrl'\n        })\n        .when(\"/login\", {\n          templateUrl: \"app/templates/login.html\",\n          authenticate: false,\n          controller: 'loginCtrl'\n        })\n\n        .otherwise({\n          redirectTo: '/home'\n        });\n    }\n  ]);",
    "angular.module('app.FileExplorer', ['jsTree.directive', 'app.services', 'app.spinalcom', 'ngMaterial', 'md.data.table'])\n  .controller('FileExplorerCtrl', [\"$scope\", \"$rootScope\", \"spinalFileSystem\", \"$mdDialog\", \"authService\", \"$compile\", \"$injector\", \"layout_uid\",\n    function ($scope, $rootScope, spinalFileSystem, $mdDialog, authService, $compile, $injector, layout_uid) {\n      $scope.injector = $injector;\n      $scope.uid = layout_uid.get();\n      $scope.curr_dir = 0;\n      $scope.lastSelected = 0;\n      $scope.fs_path = [];\n      var newFolder_prompt = $mdDialog.prompt()\n        .title('Input the name of the new folder')\n        .placeholder('Folder Name')\n        .initialValue('New Folder')\n        .required(true)\n        .ok('Ok')\n        .cancel('Cancel');\n\n      $scope.onFocus = () => {\n        spinalFileSystem.FileExplorer_focus($scope);\n      };\n      $scope.onFocus();\n      $scope.directory = [];\n      $scope.user = authService.get_user();\n\n\n      $scope.fsmoveToParent = (dir) => {\n        let idx = $scope.fs_path.indexOf(dir);\n        $scope.fs_path.splice(idx + 1);\n        let f = FileSystem._objects[dir._server_id];\n        if (f) {\n          if (f instanceof File) {\n            f.load((m) => {\n              if (m) {\n                $scope.change_curr_dir(m, $scope.fs_path);\n              }\n            });\n          } else if (f instanceof Directory) {\n            $scope.change_curr_dir(f, $scope.fs_path);\n          }\n        }\n      };\n      $scope.getIcon = (type) => {\n        return spinalDrive_Env.context_file_exp_app_icon[type] ?\n          spinalDrive_Env.context_file_exp_app_icon[type] :\n          spinalDrive_Env.context_file_exp_app_icon.default;\n      };\n\n      $scope.selectFile = (event, file) => {\n        if (event.ctrlKey == false) {\n          for (var i = 0; i < $scope.directory.length; i++) {\n            $scope.directory[i].selected = false;\n            $scope.directory[i].over = false;\n            $scope.directory[i].selectdrop = false;\n          }\n          console.log(file);\n        }\n        file.selected = !file.selected;\n      };\n      $scope.ondblclick = (file) => {\n        if (file.model_type == \"Directory\") {\n          let f = FileSystem._objects[file._server_id];\n          if (f) {\n            $scope.directory = [];\n            f.load((m) => {\n              if (m) {\n                $scope.fs_path.push({\n                  name: file.name,\n                  _server_id: file._server_id\n                });\n                $scope.change_curr_dir(m, $scope.fs_path);\n              }\n            });\n          }\n        }\n      };\n\n      $scope.getStyle = (file) => {\n        return `fill: ${file.error ? '#ff5722' : 'white'}; height: 24px;`;\n      };\n      $scope.getTime = (model) => {\n        return new Date(model.get()).toLocaleString();\n      };\n\n      $scope.change_curr_dir = (dir, path) => {\n        $scope.curr_dir = dir;\n        $scope.fs_path = path;\n        handleDirectoryFiles();\n      };\n\n      function handleDirectoryFiles() {\n        return spinalFileSystem.getFolderFiles($scope).then((res) => {\n          let i = 0;\n          let find_idx_in_dir = (res, i) => {\n            return res.findIndex((elem) => {\n              return $scope.directory[i]._server_id == elem._server_id;\n            });\n          };\n          while (i < $scope.directory.length) {\n            if (find_idx_in_dir(res, i) == -1) {\n              $scope.directory.splice(i, 1);\n              i = 0;\n            } else\n              i++;\n          }\n          let found = false;\n          for (i = 0; i < res.length; i++) {\n            found = false;\n            for (var y = 0; y < $scope.directory.length; y++) {\n              if ($scope.directory[y]._server_id === res[i]._server_id) {\n                $scope.directory[y].name = res[i].name;\n                $scope.directory[y].model_type = res[i].model_type;\n                $scope.directory[y].owner = res[i].owner;\n                $scope.directory[y].last_modified = res[i].last_modified;\n                $scope.directory[y].version = res[i].version;\n                if (res[i].upload_pecent)\n                  $scope.directory[y].upload_pecent = res[i].upload_pecent;\n                else\n                  $scope.directory[y].upload_pecent = res[i].upload_pecent;\n                if (res[i].error)\n                  $scope.directory[y].error = res[i].error;\n                else if ($scope.directory[y].error)\n                  $scope.directory[y].error = false;\n                found = true;\n                break;\n              }\n            }\n            if (found == false) {\n              $scope.directory.splice(y, 0, res[i]);\n            }\n          }\n        });\n      }\n      let listener_destructor = spinalFileSystem.subcribe('SPINAL_FS_ONCHANGE', handleDirectoryFiles);\n      $scope.$on('$destroy', listener_destructor);\n\n      $scope.enterTarget = 0;\n      $scope.getNbSelectedIcon = (type) => {\n        let nb_selected = 0;\n        for (var i = 0; i < $scope.directory.length; i++) {\n          if ($scope.directory[i].selected)\n            nb_selected++;\n        }\n\n        if (nb_selected == 1) {\n          return $scope.getIcon(type);\n        } else if (nb_selected <= 9) {\n          return \"filter_\" + nb_selected;\n        }\n        return \"filter_9_plus\";\n      };\n\n      $scope.dragCfg = {\n        \"dragstart\": (event, obj) => {\n          if (obj.selected == false && event.ctrlKey != true) {\n            for (let i = 0; i < $scope.directory.length; i++) {\n              $scope.directory[i].selected = false;\n            }\n          }\n          obj.selected = true;\n          let clone = $(\"<div id=\\\"drag-extra\\\" class=\\\"fs-drag-item\\\"><ng-md-icon icon=\\\"\" +\n            $scope.getNbSelectedIcon(obj.model_type) +\n            \"\\\" style=\\\"fill: white;height: 24px;\\\" class=\\\"md-avatar-icon\\\"></ng-md-icon>\" +\n            \"<div style=\\\"float: left;margin-left: 20px;width: -webkit-fill-available;overflow: hidden;text-overflow: ellipsis;\\\">\" +\n            \"<span style=\\\"white-space: nowrap;\\\">\" + obj.name + \"</span></div></div>\");\n          $compile(clone[0])($rootScope);\n          clone.appendTo(\"body\");\n          event.dataTransfer.setDragImage(clone[0], 0, 0);\n          spinalFileSystem.FE_selected_drag = [];\n          for (let i = 0; i < $scope.directory.length; i++) {\n            if ($scope.directory[i].selected == true) {\n              $scope.directory[i].selectdrop = true;\n              spinalFileSystem.FE_selected_drag.push($scope.directory[i]);\n            }\n          }\n          spinalFileSystem.FE_init_dir_drag = $scope.curr_dir;\n          spinalFileSystem.FE_fspath_drag = $scope.fs_path;\n\n          spinalFileSystem.addScopeVisted($scope);\n          $rootScope.current_scope_drag = $scope;\n          $scope.$apply();\n          return false;\n        },\n        \"dragend\": (event, obj) => {\n          for (let i = 0; i < $scope.directory.length; i++) {\n            $scope.directory[i].selectdrop = false;\n            $scope.directory[i].over = false;\n\n          }\n          $scope.enterTarget = 0;\n          $scope.dropOnFolder = false;\n\n          for (var i = 0; i < spinalFileSystem.FE_visited_scope.length; i++) {\n            let scope = spinalFileSystem.FE_visited_scope[i];\n            for (var j = 0; j < scope.directory.length; j++) {\n              if (scope.directory[j].over == true) {\n                scope.directory[j].over = false;\n                break;\n              }\n            }\n            scope.dropOnFolder = false;\n            scope.$apply();\n\n          }\n          spinalFileSystem.FE_visited_scope = [];\n          return false;\n        },\n        \"dragenter\": (event) => {\n          event.preventDefault();\n        },\n        \"dragover\": (event, obj) => {\n          event.preventDefault();\n          event.stopPropagation(); // Stops some browsers from redirecting.\n          if (obj._server_id == $scope.enterTarget._server_id)\n            return false;\n          if (obj.selected == true || obj.model_type != \"Directory\") {\n            $scope.enterTarget = 0;\n          } else {\n            $scope.enterTarget = obj;\n          }\n          for (let i = 0; i < $scope.directory.length; i++) {\n            $scope.directory[i].over = false;\n          }\n          if ($scope.enterTarget) {\n            event.dataTransfer.dropEffect = \"move\";\n            event.dataTransfer.effectAllowed = \"move\";\n            obj.over = true;\n          }\n          $scope.dropOnFolder = false;\n          $scope.$apply();\n          spinalFileSystem.addScopeVisted($scope);\n          for (var i = 0; i < spinalFileSystem.FE_visited_scope.length; i++) {\n            let scope = spinalFileSystem.FE_visited_scope[i];\n            if (scope != $scope) {\n              for (var j = 0; j < scope.directory.length; j++) {\n                if (scope.directory[j].over == true) {\n                  scope.directory[j].over = false;\n                  break;\n                }\n              }\n              scope.dropOnFolder = false;\n              scope.$apply();\n            }\n          }\n        },\n        \"drop\": (event, obj) => {\n          event.stopPropagation(); // Stops some browsers from redirecting.\n          event.preventDefault();\n          let curr_dir = spinalFileSystem.FE_init_dir_drag;\n          let target = 0;\n          let i = 0;\n          for (; i < $scope.directory.length; i++) {\n            if ($scope.directory[i].over) {\n              target = $scope.directory[i];\n              break;\n            }\n          }\n          if (!target || target.model_type != \"Directory\")\n            return false;\n          let files = event.target.files;\n          if (!files || files.length === 0)\n            files = (event.dataTransfer ? event.dataTransfer.files : event.originalEvent.dataTransfer.files);\n          if (files.length > 0) {\n            // dnd files\n            let m_tar = FileSystem._objects[target._server_id];\n            if (m_tar) {\n              $scope.upload_files(files, m_tar);\n            }\n            $scope.dropOnFolder = false;\n            $scope.$apply();\n\n            return false;\n          }\n\n          if (!target || target.model_type != \"Directory\")\n            return false;\n          let selected = spinalFileSystem.FE_selected_drag;\n          let m_tar = FileSystem._objects[target._server_id];\n          if (m_tar) {\n            for (i = 0; i < $scope.fs_path.length; i++) {\n              let path = FileSystem._objects[$scope.fs_path[i]._server_id];\n              if (path) {\n                if (path instanceof File) {\n                  if (path._ptr.data.value == curr_dir._server_id) {\n                    return false;\n                  }\n                } else if (path instanceof Directory) {\n                  if (path._server_id == curr_dir._server_id) {\n                    let found = false;\n                    if ($scope.fs_path.length >= 2) {\n                      for (var y = 0; y < selected.length; y++) {\n                        if (selected[y]._server_id == FileSystem._objects[$scope.fs_path[1]._server_id]._server_id) {\n                          found = true;\n                          break;\n                        }\n\n                      }\n                    }\n                    if (found == false)\n                      continue;\n                    return false;\n                  }\n                }\n              }\n\n            }\n          }\n          for (i = 0; i < selected.length; i++) {\n            let s = FileSystem._objects[selected[i]._server_id];\n            if (s)\n              curr_dir.remove_ref(s);\n          }\n          if (m_tar) {\n            m_tar.load((m) => {\n              for (var i = 0; i < selected.length; i++) {\n                let s = FileSystem._objects[selected[i]._server_id];\n                if (s)\n                  m.push(s);\n              }\n\n            });\n          }\n          return false;\n        }\n      };\n      $scope.upload_files = (files, directory_target) => {\n        if (files.length > 0) {\n          for (var i = 0; i < files.length; i++) {\n            let file = files[i];\n            let filePath = new Path(file);\n            let name = $scope.get_unused_name(file.name, directory_target);\n            let mod_file = directory_target.add_file(file.name, filePath);\n          }\n        }\n      };\n      $scope.get_unused_name = (name, directory_target, idx) => {\n        let found = false;\n        for (let i = 0; i < directory_target.length; i++) {\n          if (directory_target[i].name.get() == name)\n            found = true;\n        }\n        if (found == true) {\n          if (!idx) {\n            idx = 0;\n            name += '(' + idx + ')';\n          } else ++idx;\n          let reg = /\\(\\d+\\)$/gm;\n          name = name.replace(reg, '(' + idx + ')');\n          return $scope.get_unused_name(name, directory_target, idx);\n        }\n        return name;\n      };\n\n\n      $scope.folderDropCfg = {\n        \"drop\": (event) => {\n          event.stopPropagation(); // Stops some browsers from redirecting.\n          event.preventDefault();\n          var files = event.target.files;\n          if (!files || files.length === 0)\n            files = (event.dataTransfer ? event.dataTransfer.files : event.originalEvent.dataTransfer.files);\n          if (files.length > 0) {\n            // dnd files\n            let m_tar = $scope.curr_dir;\n            $scope.upload_files(files, m_tar);\n            $scope.dropOnFolder = false;\n            $scope.$apply();\n            return false;\n          }\n          let curr_dir = spinalFileSystem.FE_init_dir_drag;\n          if (curr_dir == $scope.curr_dir)\n            return false;\n          let selected = spinalFileSystem.FE_selected_drag;\n\n          let m_tar = $scope.curr_dir;\n          if (m_tar) {\n            let i;\n            for (i = 0; i < $scope.fs_path.length; i++) {\n              let path = FileSystem._objects[$scope.fs_path[i]._server_id];\n\n              if (path) {\n                if (path instanceof File) {\n                  if (path._ptr.data.value == curr_dir._server_id) {\n                    return false;\n                  }\n                } else if (path instanceof Directory) {\n                  if (path._server_id == curr_dir._server_id) {\n                    let found = false;\n                    if ($scope.fs_path.length >= 1) {\n                      for (var y = 0; y < selected.length; y++) {\n                        if (selected[y]._server_id == FileSystem._objects[$scope.fs_path[1]._server_id]._server_id) {\n                          found = true;\n                          break;\n                        }\n\n                      }\n                    }\n                    if (found == false)\n                      continue;\n                    return false;\n                  }\n                }\n              }\n\n            }\n          }\n\n          for (let i = 0; i < selected.length; i++) {\n            let s = FileSystem._objects[selected[i]._server_id];\n            if (s)\n              curr_dir.remove_ref(s);\n          }\n          if (m_tar) {\n            for (var i = 0; i < selected.length; i++) {\n              let s = FileSystem._objects[selected[i]._server_id];\n              if (s)\n                m_tar.push(s);\n            }\n          }\n          $scope.dropOnFolder = false;\n          return false;\n        },\n        \"dragover\": (event) => {\n          event.preventDefault();\n          for (var i = 0; i < $scope.directory.length; i++) {\n            if ($scope.directory[i].over == true) {\n              $scope.directory[i].over = false;\n              break;\n            }\n          }\n          $scope.enterTarget = 0;\n          $scope.dropOnFolder = true;\n          spinalFileSystem.addScopeVisted($scope);\n          for (i = 0; i < spinalFileSystem.FE_visited_scope.length; i++) {\n            let scope = spinalFileSystem.FE_visited_scope[i];\n            if (scope != $scope) {\n              for (var j = 0; j < scope.directory.length; j++) {\n                if (scope.directory[j].over == true) {\n                  scope.directory[j].over = false;\n                  break;\n                }\n              }\n              scope.dropOnFolder = false;\n              scope.$apply();\n            }\n          }\n          $scope.$apply();\n          return false;\n        },\n        \"dragenter\": (event) => {\n          event.preventDefault();\n          return false;\n        }\n\n      };\n\n      handleDirectoryFiles();\n\n      $scope.context_menu_file = [];\n      $scope.onrightclick = (index) => {\n        setTimeout(() => {\n          $('#fe-menu-' + $scope.uid + '-' + index).click();\n        });\n      };\n\n      $scope.open_context_menu_file = ($mdMenu, ev, file) => {\n        $scope.context_menu_file = spinalDrive_Env.get_applications('FileExplorer', {\n          file: file,\n          scope: $scope,\n        });\n        $mdMenu.open(ev);\n      };\n      $scope.context_menu_file_action = ($event, item, file) => {\n        item.launch_action({\n          evt: $event,\n          item: item,\n          file: file,\n          scope: $scope,\n        });\n      };\n\n      $scope.context_menu_curr_dir = [];\n\n      $scope.open_context_menu_curr_dir = ($mdMenu, ev) => {\n        $scope.context_menu_curr_dir = spinalDrive_Env.get_applications('FileExplorerCurrDir', {\n          scope: $scope,\n          model: $scope.curr_dir\n        });\n        $mdMenu.open(ev);\n      };\n      $scope.context_menu_curr_dir_action = ($event, item) => {\n        item.launch_action({\n          evt: $event,\n          item: item,\n          model: $scope.curr_dir,\n          scope: $scope,\n        });\n      };\n\n\n    }\n  ]);",
    "angular.module('app.FileExplorer')\n  .controller('InspectorCtrl', [\"$scope\", \"$injector\", \"spinalInspectUID\", \"authService\", \"$mdToast\", \"$interval\", \"spinalFileSystem\", \"$timeout\",\n    function ($scope, $injector, spinalInspectUID, authService, $mdToast, $interval, spinalFileSystem, $timeout) {\n      $scope.injector = $injector;\n      $scope.fs_path = [];\n      let svgGroup, rootnode, draw, update, centerNode, textGrp;\n      let tree_idx = 0;\n      let depthLength = [];\n      let maxLabelLength = 1;\n      let viewerWidth = 50;\n      let viewerHeight = 50;\n      let ptr_folow = [];\n      let animation_duration = 500;\n      let style = {\n        nodefill: {\n          empty: '#fff', // or atomic or unknown\n          ptrClosed: '#f00',\n          objClosed: '#0010f2',\n          lstClosed: '#00ab00',\n          ptrEmptyOrOpen: '#f0a9a9',\n          objEmptyOrOpen: '#87ceeb',\n          lstEmptyOrOpen: '#7fffd4'\n        }\n      };\n      let test = 0;\n      let menu = (d) => {\n        let apps = spinalDrive_Env.get_applications('Inspector', d);\n        let res = [];\n        let create_action_callback = (app) => {\n          return function (elm) {\n            let share_obj = {\n              model_server_id: d.data._server_id,\n              scope: $scope\n            };\n            app.action(share_obj);\n          };\n        };\n\n        for (var i = 0; i < apps.length; i++) {\n          let app = apps[i];\n          res.push({\n            title: app.label,\n            action: create_action_callback(app)\n          });\n        }\n        return res;\n      };\n\n      let diagonal = (s, d) => {\n        let path = `M ${s.y} ${s.x}\n                C ${(s.y + d.y) / 2} ${s.x},\n                  ${(s.y + d.y) / 2} ${d.x},\n                  ${d.y} ${d.x}`;\n        return path;\n      };\n      let zoom = () => {\n        if (d3.event.transform != null) {\n          svgGroup.attr(\"transform\", d3.event.transform);\n        }\n      };\n      let calc_dist_depth = (depth, mult) => {\n        let i = 0;\n        let res = 0;\n        while (i < depth) {\n          res += depthLength[i] * 2;\n          ++i;\n        }\n        res += depthLength[depth];\n        res *= mult;\n        return res;\n      };\n      angular.element(document).ready(function () {\n        let uid = spinalInspectUID.get_last_uid();\n        let elem = spinalInspectUID.elem[uid];\n        viewerWidth = elem.width();\n        viewerHeight = elem.height();\n        let elem_id = \"spinalinspect_\" + uid;\n        let element = d3.select(\"#\" + elem_id);\n        let tree = d3.tree().size([viewerHeight, viewerWidth]);\n        let zoomListener = d3.zoom().scaleExtent([0.1, 3]).on(\"zoom\", zoom);\n        centerNode = function (d) {\n          let x, y;\n          let depth = d.depth + 1;\n          let scale = 1;\n          x = 0;\n          depth -= d.depth;\n          y = -d.x0;\n          let x_limit = 120;\n          while (x < x_limit) {\n            x = -rootnode.y0;\n            x = x * scale + viewerWidth / 2;\n            x = x - calc_dist_depth(depth, 6) / 2 * scale;\n            if (x < x_limit) scale -= 0.01;\n          }\n          x -= calc_dist_depth(d.depth, 6) * scale;\n          y = y * scale + viewerHeight / 2;\n          baseSvg.transition().duration(animation_duration)\n            .call(zoomListener.transform, d3.zoomIdentity.translate(x, y).scale(scale));\n        };\n        element.select('svg').remove();\n        let baseSvg = element.append(\"svg\")\n          .attr(\"width\", viewerWidth).attr(\"height\", viewerHeight)\n          .classed(\"svg-content\", true)\n          .call(zoomListener);\n        baseSvg.on(\"dblclick.zoom\", null);\n\n        let centerrootbtn = d3.select(\"#spinalinspect_btn_centerroot_\" + uid);\n        centerrootbtn.on('click', () => {\n          if (!rootnode) return;\n          centerNode(rootnode);\n        });\n        textGrp = baseSvg.append('text')\n          .attr('class', 'nodeText')\n          .attr('x', viewerWidth / 2)\n          .attr('y', viewerHeight / 2)\n          .attr('text-anchor', \"middle\")\n          .attr('alignment-baseline', \"central\")\n          .attr('fill', \"#999\");\n        svgGroup = baseSvg.append(\"g\");\n\n        let onNodeClick = (d) => {\n          if (d.children) {\n            d._children = d.children;\n            d.children = null;\n          } else {\n            d.children = d._children;\n            d._children = null;\n          }\n          if (d.data.haveChild) {\n            if (!(d.children || d._children)) {\n              let m = FileSystem._objects[d.data._server_id];\n              if (m) {\n                if (m instanceof Ptr) {\n                  m.load((ptr) => {\n                    ptr.bind(onTreeChange, false);\n                    let res = {};\n                    ptr_folow.push(ptr);\n                    pushToJson(ptr, res, d, d.depth + 2, d.depth + 1);\n                    d.children = [res];\n                    d.data.children = d.children;\n                    update(d);\n                    centerNode(d);\n                  });\n                  return;\n                } else {\n                  pushToJson(m, d, d.parent, d.depth + 1, d.depth, d.data.name);\n                }\n              }\n            }\n          }\n          update(d);\n          centerNode(d);\n        };\n        draw = () => {\n          baseSvg.attr(\"width\", viewerWidth).attr(\"height\", viewerHeight);\n          if (textGrp)\n            textGrp.attr('x', viewerWidth / 2).attr(\"y\", viewerHeight / 2).text('Please Drop file from \"File Explorer\" here to inspect them.');\n          if (!rootnode) return;\n          rootnode.x0 = viewerHeight / 2;\n          rootnode.y0 = 0;\n          update(rootnode);\n        };\n        let click_focus = (d) => {\n          centerNode(d);\n        };\n        update = (source) => {\n          let _tree = tree.size([viewerHeight, viewerWidth]);\n          let treemap = _tree(rootnode);\n          let nodes = treemap.descendants();\n          let links = treemap.descendants().slice(1);\n          nodes.forEach((d) => {\n            if (!depthLength[d.depth])\n              depthLength[d.depth] = d.data.name.length;\n            else\n              depthLength[d.depth] = Math.max(d.data.name.length, depthLength[d.depth]);\n          });\n          nodes.forEach((d) => {\n            d.y = calc_dist_depth(d.depth, 6);\n          });\n\n          let node = svgGroup.selectAll('g.node').data(nodes, ((d) => {\n            return (d.id || (d.id = ++tree_idx));\n          }));\n\n          let nodeEnter = node.enter().append('g').attr('class', 'node').attr('transform', (d) => {\n              return ('translate(' + source.y0 + ',' + source.x0 + ')');\n            }).on(\"mouseover\", node_mouseover)\n            .on(\"mousemove\", function (d) {\n              node_mousemove(d);\n            })\n            .on(\"mouseout\", node_mouseout);\n\n          nodeEnter.append('circle').attr('class', 'nodeCircle').attr('r', 1e-6)\n            .on('contextmenu', d3.contextMenu(menu)).on('click', onNodeClick);\n\n\n          nodeEnter.append('text')\n            .attr('x', (d) => {\n              return d.children || d._children ? -10 : 10;\n            }).attr('dy', '.35em').attr('class', 'nodeText').attr('text-anchor', (d) => {\n              return d.children || d._children ? \"end\" : \"start\";\n            })\n            .text((d) => {\n              return d.data.name;\n            })\n            .attr('fill', '#EEE')\n            .on('click', click_focus)\n            .on('contextmenu', d3.contextMenu(menu));\n\n          var nodeUpdate = nodeEnter.merge(node);\n          nodeUpdate.transition()\n            .duration(animation_duration)\n            .attr(\"transform\", function (d) {\n              return \"translate(\" + d.y + \",\" + d.x + \")\";\n            });\n\n          // Update the node attributes and style\n          nodeUpdate.select('circle.nodeCircle')\n            .attr('r', 8)\n            .style(\"fill\", function (d) {\n              if (d.data.obj) {\n                if (d.data.haveChild && !(d.children || d._children)) {\n                  return style.nodefill.objClosed;\n                }\n                if (d.children && d.children.length > 0)\n                  return style.nodefill.objEmptyOrOpen;\n                if (!(d.children || d._children))\n                  return style.nodefill.objEmptyOrOpen;\n                return style.nodefill.objClosed;\n              } else if (d.data.lst) {\n                if (d.data.haveChild && !(d.children || d._children)) {\n                  return style.nodefill.lstClosed;\n                }\n                if (d.children && d.children.length > 0)\n                  return style.nodefill.lstEmptyOrOpen;\n                if (!(d.children || d._children))\n                  return style.nodefill.lstEmptyOrOpen;\n                return style.nodefill.lstClosed;\n              } else if (d.data.ptr) {\n                if (d.data.haveChild && !(d.children || d._children)) {\n                  return style.nodefill.ptrClosed;\n                }\n                if (d.children && d.children.length > 0)\n                  return style.nodefill.ptrEmptyOrOpen;\n                if (!(d.children || d._children))\n                  return style.nodefill.ptrEmptyOrOpen;\n                return style.nodefill.ptrClosed;\n              }\n              return style.nodefill.empty; // default\n            }).attr('cursor', 'pointer');\n\n\n          nodeUpdate.select('text.nodeText')\n            .attr('x', (d) => {\n              return d.children ? -10 : 10;\n            }).attr('text-anchor', (d) => {\n              return d.children ? \"end\" : \"start\";\n            }).text((d) => {\n              return d.data.name;\n            });\n\n          let nodeExit = node.exit().transition().duration(animation_duration).attr('transform', (d) => {\n            return 'translate(' + source.y + ',' + source.x + ')';\n          }).remove();\n          nodeExit.select('circle').attr('r', 0);\n          nodeExit.select('text').style('fill-opacity', 0);\n          let link = svgGroup.selectAll('path.link').data(links, (d) => {\n            return d.id;\n            // return d.target.id;\n          });\n          let linkEnter = link.enter().insert('path', 'g').attr('class', 'link').attr('d', (d) => {\n            let o = {\n              x: source.x0,\n              y: source.y0\n            };\n            return diagonal(o, o);\n          });\n\n          // UPDATE\n          let linkUpdate = linkEnter.merge(link);\n\n          // Transition back to the parent element position\n          linkUpdate.transition()\n            .duration(animation_duration)\n            .attr('d', (d) => {\n              return diagonal(d, d.parent);\n            });\n\n          // Remove any exiting links\n          let linkExit = link.exit().transition()\n            .duration(animation_duration)\n            .attr('d', (d) => {\n              let o = {\n                x: source.x,\n                y: source.y\n              };\n              return diagonal(o, o);\n            })\n            .remove();\n\n          // Store the old positions for transition.\n          nodes.forEach((d) => {\n            d.x0 = d.x;\n            d.y0 = d.y;\n          });\n        };\n\n\n        // resize\n        let check_redraw = () => {\n          if ((viewerWidth != elem.width()) || (viewerHeight != elem.height())) {\n            viewerWidth = elem.width();\n            viewerHeight = elem.height();\n            draw();\n          }\n        };\n\n        let interval_resize = setInterval(check_redraw, 600);\n        // let interval_resize = $interval(check_redraw, 600);\n        $scope.$on(\"$destroy\", function () {        \n          // $interval.cancel(interval_resize);\n          clearInterval(interval_resize);\n          interval_resize = undefined;\n        });\n      });\n\n      let add_table_row = (table, key, value) => {\n        let tr = table.append('tr');\n        tr.append('td').text(key);\n        tr.append('td').text(value);\n      };\n\n      function strncmp(a, b, n) {\n        return a.substring(0, n) == b.substring(0, n);\n      }\n\n      function node_mouseover(d) {\n        spinalInspectUID.tooltip.transition()\n          .duration(300)\n          .style(\"opacity\", 1);\n        spinalInspectUID.tooltip.selectAll('table').remove();\n        let table = spinalInspectUID.tooltip.append('table');\n\n        add_table_row(table, \"Contructor\", d.data._constructor);\n        add_table_row(table, \"Server_id\", d.data._server_id);\n\n        let m = FileSystem._objects[d.data._server_id];\n        if (m) {\n          if (m instanceof Lst) {\n            add_table_row(table, \"Length\", m.length);\n          } else if (m instanceof Str) {\n            let data = m.get();\n            add_table_row(table, \"Data\", data);\n            add_table_row(table, \"Length\", m.length);\n            let imgtype = \"data:image/\";\n            if (strncmp(data, imgtype, imgtype.length)) {\n              let tr = table.append('tr');\n              tr.append('td').text(\"Preview\");\n              let img = tr.append('td').append(\"img\");\n              img.attr(\"src\", data);\n              img.attr(\"alt\", \"preview\");\n              img.style(\"max-height\", 100);\n              img.style(\"max-width\", 100);\n            }\n          } else if (m instanceof Val) {\n            add_table_row(table, \"Value\", m.get());\n          } else if (m instanceof Ptr) {\n            add_table_row(table, \"Target Ptr\", m.data.value);\n            m.load((ptr) => {\n              if (ptr)\n                add_table_row(table, \"Target Contructor\", ptr.constructor.name);\n            });\n          } else if (m instanceof TypedArray) {\n            add_table_row(table, \"Data\", m.get());\n          }\n\n        }\n      }\n\n      function node_mousemove(d) {\n        spinalInspectUID.tooltip\n          .style(\"left\", (d3.event.pageX) + \"px\")\n          .style(\"top\", (d3.event.pageY) + \"px\");\n      }\n\n      function node_mouseout() {\n        spinalInspectUID.tooltip.transition()\n          .duration(300)\n          .style(\"opacity\", 1e-6);\n      }\n      let timeout_check_node = null;\n      let timeout_update_graph = null;\n      let onTreeChange = () => {\n        if (timeout_check_node) return;\n        // rootnode;\n        timeout_check_node = $timeout(() => {\n          timeout_check_node = null;\n          check_nodes_rec(rootnode, rootnode.data.name);\n          if (timeout_update_graph) return;\n          timeout_update_graph = $timeout(() => {\n            timeout_update_graph = null;\n            update(rootnode);\n          }, 500);\n        }, 500);\n      };\n      let check_nodes_rec = (n, name) => {\n        if (!(n && n.data && n.data._server_id)) return;\n        let m = FileSystem._objects[n.data._server_id];\n        if (m) {\n          // if (!m.has_been_modified()) return;\n          if (!name)\n            name = n.data.name;\n          n.data._constructor = m.constructor.name;\n          n.data._server_id = m._server_id;\n          if (m instanceof Val || m instanceof Bool) {\n            n.data.name = n.data.name.replace(/ *= [.\\-\\w]*/g, \"\");\n            n.data.name += ` = ${m.get()}`;\n          } else if (m instanceof Str) {\n            let str = m.get();\n            if (str.length > 25)\n              str = str.substring(0, 25) + '...';\n            n.data.name = n.data.name.replace(/ *= *\"*\\w*.*\"*/g, \"\");\n            n.data.data = `${name} = \\\"${m.get()}\\\"`;\n            n.data.name += ` = \\\"${str}\\\"`;\n          } else if (m instanceof TypedArray) {\n            n.data.name = n.data.name.replace(/ *= [0-9.e\\-]*/g, \"\");\n            n.data.name += ` = ${m._size}`;\n          } else if (m instanceof Ptr) {\n            n.data.ptr = m.data.value;\n            n.data.name = n.data.name.replace(/ *= *\"*\\w*\"*/g, \"\");\n            n.data.name += ` = \\\"${m.data.value}\\\"`;\n            n.data.haveChild = true;\n            let children = n.children || n._children;\n            if (!children) return; // children not charged yet\n            m.load((ptr) => {\n              if (children[0].data._server_id == ptr._server_id) {\n                check_nodes_rec(children[0]);\n              }\n            });\n          } else if (m instanceof Lst) {\n            n.data.name = n.data.name.replace(/\\[[0-9]*\\]/g, \"\");\n            n.data.name += `[${m.length}]`;\n            n.data.lst = true;\n            if (m.length === 0) {\n              n.data.haveChild = false;\n            } else\n              n.data.haveChild = true;\n            let children = n.children || n._children;\n            if (!children) {\n              // children not loaded yet\n              return;\n            }\n\n            for (let i = 0; i < m.length; i++) {\n              if (children[i] && children[i].data && children[i].data._server_id &&\n                children[i].data._server_id === m[i]._server_id) {\n                check_nodes_rec(children[i]);\n              } else {\n                // check if already exist\n                let j = i;\n                let found = -1;\n                for (; j < children.length; j++) {\n                  // children[j];\n                  if (children[j] && children[j].data && children[j].data._server_id &&\n                    children[j].data._server_id === m[i]._server_id) {\n                    found = j;\n                    break;\n                  }\n                }\n                // if exist splice to remove and add it to the right place\n                if (found != -1) {\n                  let items = children.splice(j, 1);\n                  if (items.length > 0)\n                    children.splice(i, 0, items[0]);\n                }\n                // if not exist create it\n                else {\n                  let res = {};\n                  pushToJson(m[i], res, n, n.depth + 1, n.depth + 1);\n                  children.splice(i, 0, res);\n                }\n              }\n            }\n            if (m.length < children.length)\n              children.splice(m.length, children.length - m.length);\n            if (children.length === 0) {\n              n.children = n._children = n.data.children = n.data._children = null;\n            }\n          } else if (m instanceof Model) {\n            n.data.obj = true;\n            n.data.name = n.data.name.replace(/{[0-9]*}/g, \"\");\n            n.data.name += `{${m._attribute_names.length}}`;\n            let i = 0;\n            let children = n.children || n._children;\n            if (m._attribute_names.length === 0) {\n              n.data.haveChild = false;\n            } else\n              n.data.haveChild = true;\n            if (!children) {\n              return; // children not loaded yet\n            }\n            for (i = 0; i < children.length; i++) {\n              children[i].data.used = false;\n            }\n            for (i = 0; i < m._attribute_names.length; i++) {\n              let model_child = m[m._attribute_names[i]];\n              let found = false;\n              for (let j = 0; j < children.length; j++) {\n                let child = children[j];\n                if (child && child.data && child.data._server_id &&\n                  model_child._server_id === child.data._server_id) {\n                  child.data.used = true;\n                  check_nodes_rec(child);\n                  found = true;\n                }\n              }\n              if (found == false) {\n                let res = {};\n                pushToJson(model_child, res, n, n.depth + 1, n.depth + 1);\n                res.data.used = true;\n                children.push(res);\n              }\n            }\n            i = 0;\n            while (i < children.length) {\n              if (!children[i].data.used) {\n                children.splice(i, 1);\n                continue;\n              }\n              i++;\n            }\n          }\n\n        }\n      };\n      $scope.onFocus = () => {\n        spinalFileSystem.setlastInspector($scope);\n      };\n      $scope.set_model = (model_id) => {\n        for (var i = 0; i < ptr_folow.length; i++) {\n          ptr_folow[i].unbind(onTreeChange);\n        }\n        ptr_folow = [];\n        $scope.model = spinalFileSystem.lastfileSelected;\n        let m = FileSystem._objects[model_id];\n        if (m) {\n          ptr_folow.push(m);\n          m.bind(onTreeChange);\n          $scope.new_tree(m);\n        }\n      };\n\n      let pushToJson = (m, n, parent, max_depth = 1, depth = 0, name = null) => {\n        if (!m) return;\n        if (!name) name = m.constructor.name;\n        n.parent = parent;\n        n.depth = depth;\n        n.data = {};\n        n.data.name = name;\n        n.data._constructor = m.constructor.name;\n        n.data._server_id = m._server_id;\n\n        ++depth;\n        if (m instanceof Lst) {\n          n.data.name = n.data.name.replace(/\\[[0-9]*\\]/g, \"\");\n          n.data.name += `[${m.length}]`;\n          n.data.lst = true;\n          if (m.length == 0) {\n            n.data.haveChild = false;\n            return;\n          }\n          n.data.haveChild = true;\n          if (depth > max_depth) {\n            return;\n          }\n          n.children = [];\n          n.data.children = n.children;\n          for (let i = 0; i < m.length; i++) {\n            let res = {};\n            pushToJson(m[i], res, n, max_depth, depth);\n            n.children.push(res);\n          }\n        } else if (m instanceof Val || m instanceof Bool) {\n          n.data.name += ` = ${m.get()}`;\n        } else if (m instanceof Str) {\n          let str = m.get();\n          if (str.length > 25)\n            str = str.substring(0, 25) + '...';\n          n.data.data = `${name} = \\\"${m.get()}\\\"`;\n          n.data.name += ` = \\\"${str}\\\"`;\n        } else if (m instanceof Ptr) {\n          n.data.haveChild = true;\n          n.data.ptr = m.data.value;\n          n.data.name += ` = \\\"${m.data.value}\\\"`;\n        } else if (m instanceof TypedArray) {\n          n.data.name += ` = ${m._size}`;\n        } else if (m instanceof Model) {\n          n.data.obj = true;\n          n.data.name = n.data.name.replace(/{[0-9]*}/g, \"\");\n          n.data.name += `{${m._attribute_names.length}}`;\n          if (depth > max_depth) {\n            if (m._attribute_names.length > 0) {\n              n.data.haveChild = true;\n            }\n            return;\n          }\n          n.children = [];\n          n.data.children = n.children;\n          for (var i = 0; i < m._attribute_names.length; i++) {\n            let res = {};\n            pushToJson(m[m._attribute_names[i]], res, n, max_depth, depth, m._attribute_names[i]);\n            n.children.push(res);\n          }\n\n\n        }\n      };\n\n      let toJson = (m, n, max_depth = 1, depth = 0, name = m.constructor.name) => {\n        n.name = name;\n        n._constructor = m.constructor.name;\n        n._server_id = m._server_id;\n\n        ++depth;\n        if (m instanceof Lst) {\n          n.name += `[${m.length}]`;\n          n.lst = true;\n          if (m.length == 0) return;\n          if (depth > max_depth) {\n            return;\n          }\n          n.haveChild = true;\n          n.children = [];\n          for (let i = 0; i < m.length; i++) {\n            let res = {};\n            toJson(m[i], res, max_depth, depth);\n            children.push(res);\n          }\n        } else if (m instanceof Val || m instanceof Bool) {\n          n.name += ` = ${m.get()}`;\n        } else if (m instanceof Str) {\n          let str = m.get();\n          if (str.length > 25)\n            str = str.substring(0, 25) + '...';\n          n.data = `${name} = \\\"${m.get()}\\\"`;\n          n.name += ` = \\\"${str}\\\"`;\n        } else if (m instanceof Ptr) {\n          n.haveChild = true;\n          n.ptr = m.data.value;\n          n.name += ` = \\\"${m.data.value}\\\"`;\n        } else if (m instanceof TypedArray) {\n          n.name += ` = ${m._size}`;\n        } else if (m instanceof Model) {\n          n.obj = true;\n          n.name += `{${m._attribute_names.length}}`;\n          if (depth > max_depth) {\n            if (m._attribute_names.length > 0) {\n              n.haveChild = true;\n            }\n            return;\n          }\n          n.children = [];\n          for (var i = 0; i < m._attribute_names.length; i++) {\n            let res = {};\n            toJson(m[m._attribute_names[i]], res, max_depth, depth, m._attribute_names[i]);\n            n.children.push(res);\n          }\n        }\n      };\n\n      $scope.new_tree = (model) => {\n        if (!model) return;\n        if (textGrp)\n          textGrp.remove();\n        textGrp = null;\n        let res = {};\n        toJson(model, res);\n        rootnode = d3.hierarchy(res, function (d) {\n          return d.children;\n        });\n        if (draw) {\n          draw();\n          centerNode(rootnode);\n        }\n      };\n\n      $scope.folderDropCfg = {\n        \"drop\": (event) => {\n          event.stopPropagation(); // Stops some browsers from redirecting.\n          event.preventDefault();\n          let selected = spinalFileSystem.FE_selected_drag;\n          if (selected && selected[0]) { // change to multiple selection later\n            $scope.fs_path = Array.from(spinalFileSystem.FE_fspath_drag);\n            $scope.fs_path.push({\n              name: selected[0].name,\n              _server_id: selected[0]._server_id\n            });\n            $scope.set_model(selected[0]._server_id);\n          }\n          return false;\n        },\n        \"dragover\": (event) => {\n          event.preventDefault();\n\n          return false;\n        },\n        \"dragenter\": (event) => {\n          event.preventDefault();\n          return false;\n        }\n\n      };\n      spinalFileSystem.setlastInspector($scope);\n      $scope.set_model(spinalFileSystem.lastfileSelected);\n\n    }\n  ]);",
    "angular.module('app.controllers')\n  .controller('loginCtrl', [\"$scope\", \"authService\", \"$mdToast\", \"$location\",\n    function ($scope, authService, $mdToast, $location) {\n      let toast = $mdToast.simple()\n        .hideDelay(3000);\n      let user = authService.get_user();\n      authService.logout();\n      $scope.conf = {\n        email: \"\",\n        password: \"\"\n      };\n      $scope.ConnectBtn = () => {\n        authService.login($scope.conf.email, $scope.conf.password).then(\n          () => {\n            $location.path('/home');\n          },\n          (err) => {\n            toast.textContent(err);\n            $mdToast.show(toast);\n          }\n        );\n      };\n\n    }\n  ]);",
    "angular.module('app.controllers')\n  .controller('mainCtrl', [\"$scope\", \"$routeParams\", \"goldenLayoutService\", \"spinalModelDictionary\",\n    function ($scope, $routeParams, goldenLayoutService, spinalModelDictionary) {\n      goldenLayoutService.init();\n    }\n  ]);",
    "angular.module('app.controllers')\n  .controller('RightMenuCtrl', [\"$scope\", \"$timeout\", \"$mdSidenav\", \"$location\", \"authService\", \"$mdDialog\", \"$templateCache\",\n    function ($scope, $timeout, $mdSidenav, $location, authService, $mdDialog, $templateCache) {\n      authService.wait_connect().then(() => {\n        $scope.username = authService.get_user().username;\n      });\n\n      $scope.close = function () {\n        $mdSidenav('right').close();\n      };\n\n      $scope.logOut = () => {\n        $mdSidenav('right').close().then(function () {\n          $mdDialog.show($mdDialog.confirm()\n            .ariaLabel('confirm menu')\n            .ok('Confim')\n            .cancel('Cancel')\n            .title(\"Do you want to log out ?\")\n            .targetEvent(event)).then(function () {\n            $location.path('/login');\n          }, function () {});\n        });\n      };\n      $scope.modifyPassword = function (event) {\n        $mdSidenav('right').close().then(function () {\n          let my_prompt = $mdDialog.confirm()\n            .ariaLabel('confirm menu')\n            .ok('Confim')\n            .cancel('Cancel')\n            .title(\"Do you want to modify your password ?\")\n            .targetEvent(event);\n          $mdDialog.show(my_prompt).then(function (result) {\n            $mdDialog.show({\n              ariaLabel: 'changePasswordModal',\n              template: $templateCache.get(\"changePasswordModal.html\"),\n              parent: angular.element(document.body),\n              clickOutsideToClose: true,\n              fullscreen: true,\n              controller: [\"$scope\", \"authService\", \"$mdToast\", \"$q\", \"$mdDialog\", changePasswordModelCtrl],\n            });\n          }, function () {});\n        });\n      };\n      $scope.menuList = [{\n        name: \"Change Password\",\n        action: $scope.modifyPassword\n      }, {\n        name: \"Log out\",\n        action: $scope.logOut\n      }];\n    }\n  ])\n  .controller('navbarCtrl', [\"$scope\", \"authService\", \"$location\", \"goldenLayoutService\", \"$mdSidenav\",\n    function ($scope, authService, $location, goldenLayoutService, $mdSidenav) {\n      $scope.username = \"\";\n      $scope.connected = false;\n\n      authService.wait_connect().then(() => {\n        $scope.username = authService.get_user().username;\n        $scope.connected = true;\n\n      });\n\n      $scope.logout = () => {\n        $location.path('/login');\n      };\n      $scope.clickUser = () => {\n        $mdSidenav('right').open();\n      };\n\n\n      // get in SpinalDrive_Env\n      $scope.layouts = [{\n          id: \"drag-folder-explorer\",\n          name: \"Folder Explorer\",\n          cfg: {\n            isClosable: true,\n            title: \"Folder Explorer\",\n            type: 'component',\n            width: 20,\n            componentName: 'SpinalHome',\n            componentState: {\n              template: 'sideBar.html',\n              module: 'app.sidebar',\n              controller: 'sideBarCtrl'\n            }\n          }\n        },\n\n        {\n          id: \"drag-file-explorer\",\n          name: \"File Explorer\",\n          cfg: {\n            isClosable: true,\n            title: \"File Explorer\",\n            type: 'component',\n            componentName: 'SpinalHome',\n            componentState: {\n              template: 'FileExplorer.html',\n              module: 'app.FileExplorer',\n              controller: 'FileExplorerCtrl'\n            }\n          }\n        },\n\n        {\n          id: \"drag-inspector\",\n          name: \"Inspector\",\n          cfg: {\n            isClosable: true,\n            title: \"Inspector\",\n            type: 'component',\n            componentName: 'SpinalHome',\n            componentState: {\n              template: 'inspector.html',\n              controller: 'InspectorCtrl'\n            }\n          }\n        },\n\n      ];\n\n      for (var i = 0; i < $scope.layouts.length; i++) {\n        goldenLayoutService.registerPanel($scope.layouts[i]);\n      }\n\n    }\n  ]);\nvar changePasswordModelCtrl = function ($scope, authService, $mdToast, $q, $mdDialog) {\n  $scope.passwordInputType = 'password';\n  $scope.showPassword = function () {\n    $scope.passwordInputType = 'text';\n  };\n  $scope.hidePassword = function () {\n    $scope.passwordInputType = 'password';\n  };\n\n  $scope.cancel = function () {\n    $mdDialog.cancel();\n  };\n  $scope.change_password = {\n    currentPassword: \"\",\n    password: \"\",\n    confirm_password: \"\"\n  };\n  $scope.onError = function (err) {\n    $mdToast.showSimple(\"Error : \" + err);\n  };\n  let options = location.host + '/';\n\n  $scope.change_password = (user_id, password, new_password) => {\n    let deferred = $q.defer();\n    SpinalUserManager.change_password(options, user_id, password, new_password, function () {\n      deferred.resolve();\n    }, function (err) {\n      deferred.reject(err);\n    });\n    return deferred.promise;\n  };\n\n  $scope.get_user_id = (user_name, password) => {\n    let deferred = $q.defer();\n    SpinalUserManager.get_user_id(options, user_name, password, function (response) {\n      let id = parseInt(response);\n      deferred.resolve(id);\n    }, function (err) {\n      deferred.reject(err);\n    });\n    return deferred.promise;\n  };\n\n  $scope.changePasswordSubmit = (newpasswordForm, change_password) => {\n    if (newpasswordForm.$valid) {\n      let user = authService.get_user();\n      $scope.get_user_id(user.username, change_password.currentPassword)\n        .then(function (user_id) {\n          $scope.change_password(user.username, change_password.currentPassword, change_password.password)\n            .then(function () {\n              authService.save_user(user.username, change_password.password);\n              $mdToast.showSimple(\"Password has been successfully modified.\");\n              $mdDialog.hide();\n            }, $scope.onError);\n        }, $scope.onError);\n      return;\n    }\n  };\n\n};",
    "angular.module('app.sidebar', ['jsTree.directive', 'app.services', 'app.spinalcom'])\n  .controller('sideBarCtrl', [\"$scope\", \"$rootScope\", \"spinalFileSystem\", \"$mdDialog\", \"$injector\",\n    function ($scope, $rootScope, spinalFileSystem, $mdDialog, $injector) {\n      $scope.injector = $injector;\n      $scope.fsdir = [];\n      $scope.all_dir = {};\n      let selected_node = 0;\n      var newFolder_prompt = $mdDialog.prompt()\n        .title('Input the name of the new folder')\n        .placeholder('Folder Name')\n        .initialValue('New Folder')\n        .required(true)\n        .ok('Ok')\n        .cancel('Cancel');\n\n      $scope.DnD_callback = (op, node, par, pos, more) => {\n        if (((op === \"move_node\" || op === \"copy_node\") && node.type && node.type == \"root\") || par.id == \"#\") {\n          return false;\n        }\n\n        if (node.original.model == par.original.model)\n          return false;\n\n        if ((op === \"move_node\" || op === \"copy_node\") && more && more.core) {\n          if (confirm('Are you sure you want to move the folder ?')) {\n            // UPDATE SPINALCORE MODELS HERE\n            let m_parent = FileSystem._objects[par.original.model];\n            let m_node;\n            let n_par = spinalFileSystem.folderExplorer_dir[node.original.parent];\n            let n_parent = FileSystem._objects[n_par.model];\n            let n;\n            for (var i = 0; i < n_parent.length; i++) {\n              if (n_parent[i]._ptr.data.value == node.original.model) {\n                m_node = n_parent[i];\n                break;\n              }\n            }\n\n            if (!m_parent || !m_node)\n              return false;\n\n            if (m_parent != n_parent) {\n              let node_name = m_node.name.get();\n              let base_node_name = node_name;\n              let x = 0;\n              while (m_parent.has(node_name)) {\n                node_name = base_node_name + '(' + x + ')';\n                x++;\n              }\n              if (node_name != m_node.name.get())\n                m_node.name.set(node_name);\n            }\n            if (op == \"move_node\" || ((m_parent == n_parent) && op == \"copy_node\")) {\n              for (i = 0; i < n_parent.length; i++) {\n                let f = n_parent[i];\n                if (f == m_node) {\n                  n_parent.splice(i, 1);\n                  if (i < pos)\n                    pos--;\n                  break;\n                }\n              }\n            }\n            // if ((m_parent == n_parent) && op == \"copy_node\") return false;\n            m_parent.insert(pos, [m_node]);\n            return true;\n          }\n          return false;\n        }\n        return true;\n\n      };\n\n\n      $scope.contextMenu = (node) => {\n        let apps = spinalDrive_Env.get_applications('FolderExplorer', node);\n        let create_action_callback = (node, app) => {\n          return function (obj) {\n            let share_obj = {\n              node: node,\n              model_server_id: node.original.model,\n              scope: $scope\n            };\n            app.action(share_obj);\n          };\n        };\n\n        let res = {};\n        for (var i = 0; i < apps.length; i++) {\n          let app = apps[i];\n          res[app.name] = {\n            label: app.label,\n            icon: app.icon,\n            action: create_action_callback(node, app)\n          };\n        }\n        return res;\n      };\n\n      $scope.treeCore = {\n        \"themes\": {\n          \"name\": \"default-dark\"\n        },\n        \"check_callback\": $scope.DnD_callback\n      };\n      let listener_destructor = spinalFileSystem.subcribe('SPINAL_FS_ONCHANGE', (events, args) => {\n        spinalFileSystem.getFolderJson($scope.all_dir).then((res) => {\n          $scope.fsdir = res.tree;\n          $scope.all_dir = res.all_dir;\n        });\n      });\n      $scope.$on('$destroy', listener_destructor);\n\n      $scope.select_node = (e, data) => {\n        selected_node = data.node.original;\n        spinalFileSystem.select_node($scope.all_dir, data);\n      };\n      $scope.onChangeNodeTree = (e, data) => {\n        spinalFileSystem.onChangeNodeTree($scope.all_dir, data);\n      };\n      $scope.onbdlclick = (event) => {\n        var node = $(event.target).closest(\"li\");\n        spinalFileSystem.onbdlclick($scope.all_dir, node[0].id);\n      };\n\n      spinalFileSystem.init();\n      spinalFileSystem.getFolderJson($scope.all_dir).then((res) => {\n        $scope.fsdir = res.tree;\n        $scope.all_dir = res.all_dir;\n      });\n    }\n  ]);",
    "angular.module('app.directives')\n  .directive('dragDrop', function () {\n    return {\n      scope: {\n        fileObj: '=fileObj',\n        events: '=dragEvents'\n      },\n      link: function (scope, element) {\n        let events = [];\n        element.attr(\"draggable\", \"true\");\n        if (scope.events) {\n          let create_callback_event = (key, scope) => {\n            return (event) => {\n              return scope.events[key](event, scope.fileObj);\n            };\n          };\n\n          for (let key in scope.events) {\n            if (scope.events.hasOwnProperty(key)) {\n              let obj = {\n                fn: create_callback_event(key, scope),\n                key: key\n              };\n              events.push(obj);\n              element.on(key, obj.fn);\n            }\n          }\n          scope.$on('$destroy', () => {\n            for (var i = 0; i < events.length; i++) {\n              element.off(events[i].key, events[i].fn);\n            }\n          });\n        }\n\n      }\n\n    };\n  })\n  .directive('folderDrop', function () {\n    return {\n      scope: {\n        events: '=folderdropEvents'\n      },\n      link: function (scope, element) {\n        let events = [];\n        if (scope.events) {\n          let create_callback_event = (key, element) => {\n            return (event) => {\n              return scope.events[key](event, element);\n            };\n          };\n          for (let key in scope.events) {\n            if (scope.events.hasOwnProperty(key)) {\n              let obj = {\n                fn: create_callback_event(key, element),\n                key: key\n              };\n              events.push(obj);\n              element.on(key, obj.fn);\n            }\n          }\n          scope.$on('$destroy', () => {\n            for (var i = 0; i < events.length; i++) {\n              element.off(events[i].key, events[i].fn);\n            }\n          });\n        }\n\n      }\n\n    };\n  });",
    "/*\n * jstree.directive [http://www.jstree.com]\n * http://arvindr21.github.io/jsTree-Angular-Directive\n *\n * Copyright (c) 2014 Arvind Ravulavaru\n * Licensed under the MIT license.\n *\n * Modified by Laurent HA TAM DAN\n * Copyright 2015 SpinalCom - www.spinalcom.com\n *\n */\n\nvar ngJSTree = angular.module('jsTree.directive', []);\nngJSTree.directive('jsTree', ['$http', function ($http) {\n  var tree = {};\n  var treeDir = {\n    restrict: 'EA',\n    fetchResource: function (url, cb) {\n      return $http.get(url).then(function (data) {\n        if (cb) cb(data.data);\n      });\n    },\n\n    managePlugins: function (s, e, a, config) {\n      if (a.treePlugins) {\n        config.plugins = a.treePlugins.split(',');\n        config.core = config.core || {};\n        config.core.check_callback = config.core.check_callback || true;\n\n        if (config.plugins.indexOf('state') >= 0) {\n          config.state = config.state || {};\n          config.state.key = a.treeStateKey;\n        }\n\n        if (config.plugins.indexOf('search') >= 0) {\n          var to = false;\n          if (e.next().attr('class') !== 'ng-tree-search') {\n            e.after('<input type=\"text\" placeholder=\"Search Tree\" class=\"ng-tree-search\"/>')\n              .next()\n              .on('keyup', function (ev) {\n                if (to) {\n                  clearTimeout(to);\n                }\n                to = setTimeout(function () {\n                  tree.jstree(true).search(ev.target.value);\n                }, 250);\n              });\n          }\n        }\n\n        if (config.plugins.indexOf('checkbox') >= 0) {\n          config.checkbox = config.checkbox || {};\n          config.checkbox.keep_selected_style = false;\n        }\n\n        if (config.plugins.indexOf('contextmenu') >= 0) {\n          if (a.treeContextmenu) {\n            config.contextmenu = config.contextmenu || {\n              // 'select_node': false,\n            };\n            if (typeof a.disableselectContextmenu != 'undefined') {\n              config.contextmenu.select_node = false;\n            }\n            if (a.treeContextmenuaction != undefined) {\n              config.contextmenu.items = function (e) {\n                return s.$eval(a.treeContextmenuaction)(e);\n              };\n            } else {\n              config.contextmenu.items = function (node) {\n                if (typeof s[a.treeContextmenu] == 'function')\n                  return s[a.treeContextmenu](node);\n                return s[a.treeContextmenu];\n              };\n            }\n          }\n        }\n\n        if (config.plugins.indexOf('types') >= 0) {\n          if (a.treeTypes) {\n            config.types = s[a.treeTypes];\n          }\n        }\n\n        if (config.plugins.indexOf('dnd') >= 0) {\n          if (a.treeDnd) {\n            config.dnd = s[a.treeDnd];\n          }\n        }\n      }\n      return config;\n    },\n    manageEvents: function (s, e, a) {\n      if (a.treeEvents) {\n        var evMap = a.treeEvents.split(';');\n        for (var i = 0; i < evMap.length; i++) {\n          if (evMap[i].length > 0) {\n            // plugins could have events with suffixes other than '.jstree'\n            var evt = evMap[i].split(':')[0];\n            if (evt.indexOf('.') < 0) {\n              evt = evt + '.jstree';\n            }\n            var cb = evMap[i].split(':')[1];\n            tree.on(evt, s[cb]);\n          }\n        }\n      }\n    },\n    manageBinds: function (s, e, a) {\n      if (a.treeBinds) {\n        var evMap = a.treeBinds.split(';');\n        for (var i = 0; i < evMap.length; i++) {\n          if (evMap[i].length > 0) {\n            var evt = evMap[i].split(':')[0];\n            var cb = evMap[i].split(':')[1];\n            tree.on(evt, s[cb]);\n          }\n        }\n      }\n    },\n    link: function (s, e, a) { // scope, element, attribute \\O/\n      $(function () {\n        var config = {};\n\n        // users can define 'core'\n        config.core = {};\n        if (a.treeCore) {\n          config.core = $.extend(config.core, s[a.treeCore]);\n        }\n\n        // clean Case\n        a.treeData = a.treeData ? a.treeData.toLowerCase() : '';\n        a.treeSrc = a.treeSrc ? a.treeSrc.toLowerCase() : '';\n\n        if (a.treeData == 'html') {\n          treeDir.fetchResource(a.treeSrc, function (data) {\n            e.html(data);\n            treeDir.init(s, e, a, config);\n          });\n        } else if (a.treeData == 'json') {\n          treeDir.fetchResource(a.treeSrc, function (data) {\n            config.core.data = data;\n            treeDir.init(s, e, a, config);\n          });\n        } else if (a.treeData == 'scope') {\n          s.$watch(a.treeModel, function (n, o) {\n            if (n) {\n              config.core.data = s[a.treeModel];\n              $(e).jstree('destroy');\n              treeDir.init(s, e, a, config);\n            }\n          }, true);\n          // Trigger it initally\n          // Fix issue #13\n          config.core.data = s[a.treeModel];\n          treeDir.init(s, e, a, config);\n        } else if (a.treeAjax) {\n          config.core.data = {\n            'url': a.treeAjax,\n            'data': function (node) {\n              return {\n                'id': node.id != '#' ? node.id : 1\n              };\n            }\n          };\n          treeDir.init(s, e, a, config);\n        }\n      });\n\n    },\n    init: function (s, e, a, config) {\n      treeDir.managePlugins(s, e, a, config);\n      tree = $(e).jstree(config);\n      treeDir.manageEvents(s, e, a);\n      treeDir.manageBinds(s, e, a);\n    }\n  };\n\n  return treeDir;\n\n}]);",
    "compareTo.$inject = [];\n\nfunction compareTo() {\n  return {\n    require: \"ngModel\",\n    scope: {\n      compareTolValue: \"=compareTo\"\n    },\n    link: function (scope, element, attributes, ngModel) {\n      ngModel.$validators.compareTo = function (modelValue) {\n        return modelValue == scope.compareTolValue;\n      };\n      scope.$watch(\"compareTolValue\", function () {\n        ngModel.$validate();\n      });\n    }\n  };\n}\nangular.module('app.directives')\n  .directive(\"navbar\", [\n    function () {\n      return {\n        restrict: 'E',\n        templateUrl: 'app/templates/navbar.html',\n        controller: 'navbarCtrl',\n      };\n    }\n  ])\n  .directive(\"menuGlayout\", ['goldenLayoutService', '$timeout',\n    function (goldenLayoutService, $timeout) {\n      return {\n        restrict: 'E',\n        scope: {\n          layoutInfo: '=info'\n        },\n        replace: true,\n        template: '<li ng-repeat=\\\"layout in layoutInfo\\\"  id=\\\"{{layout.id}}\\\"><a >{{layout.name}}</a></li>',\n        link: (scope, element, attrs) => {\n          goldenLayoutService.wait_ready().then(() => {\n            let create_callback = (goldenLayoutService, layout) => {\n              return () => {\n                goldenLayoutService.createChild(layout.cfg);\n              };\n            };\n            goldenLayoutService.watch_panel((panels) => {\n              $timeout(() => {\n                for (var i = 0; i < panels.length; i++) {\n                  let layout = panels[i];\n                  if (!layout.shown) {\n                    layout.shown = true;\n                    goldenLayoutService.createDragSource($(\"#\" + layout.id)[0], layout.cfg);\n                    $(\"#\" + layout.id).click(create_callback(goldenLayoutService, layout));\n                  }\n                }\n              }, 200);\n              scope.layoutInfo = panels;\n            });\n          });\n        }\n      };\n    }\n  ])\n  .directive('ngRightClick', ['$parse', function ($parse) {\n    return function (scope, element, attrs) {\n      var fn = $parse(attrs.ngRightClick);\n      element.bind('contextmenu', function (event) {\n        scope.$apply(function () {\n          event.preventDefault();\n          fn(scope, {\n            $event: event\n          });\n        });\n      });\n    };\n  }])\n  .directive('compareTo', compareTo)\n  .provider('$copyToClipboard', [function () {\n    this.$get = ['$q', '$window', function ($q, $window) {\n      var body = angular.element($window.document.body);\n      var textarea = angular.element('<textarea/>');\n      textarea.css({\n        position: 'fixed',\n        opacity: '0'\n      });\n      return {\n        copy: function (stringToCopy) {\n          var deferred = $q.defer();\n          deferred.notify(\"copying the text to clipboard\");\n          textarea.val(stringToCopy);\n          body.append(textarea);\n          textarea[0].select();\n          try {\n            var successful = $window.document.execCommand('copy');\n            if (!successful) throw successful;\n            deferred.resolve(successful);\n          } catch (err) {\n            deferred.reject(err);\n          } finally {\n            textarea.remove();\n          }\n          return deferred.promise;\n        }\n      };\n    }];\n  }]);",
    "angular.module('app.directives')\n  .factory('spinalInspectUID', [function () {\n    let uid = 0;\n    let facto = {\n      uid: 0,\n      get_uid: () => {\n        uid = facto.uid;\n        ++facto.uid;\n        return uid;\n      },\n      get_last_uid: () => {\n        return uid;\n      },\n      elem: {}\n    };\n\n    //tooltip ~~\n    facto.tooltip = d3.select(\"body\").append(\"div\")\n      .attr(\"class\", \"inspect-tooltip\")\n      .style(\"opacity\", 1e-6);\n\n\n\n    return facto;\n  }])\n  .directive('spinalInspect', [\"spinalInspectUID\", function (spinalInspectUID) {\n    let directive = {\n      restrict: 'EA',\n      link: function (s, e, a) { // scope, element, attribute\n        let uid = spinalInspectUID.get_uid();\n        let elem = $('<div class=\"spinal-inspector-container\" id=\"spinalinspect_' + uid +\n          '\"></div><div class=\"spinal-inspect-btn-grp\"><button class=\"btn btn-primary fa fa-bullseye\" id=\"spinalinspect_btn_centerroot_' + uid +\n          '\"></button></div>');\n        spinalInspectUID.elem[uid] = elem;\n        $(e).append(elem);\n      }\n    };\n    return directive;\n  }]);",
    "angular.module('app.spinalcom')\n  .factory('authService', [\"$q\", \"ngSpinalCore\", \"config\", \"$http\",\n    function ($q, ngSpinalCore, config, $http) {\n      let factory = {};\n      let user = {\n        username: \"\",\n        password: \"\"\n      };\n      let is_Connected = false;\n      factory.save_user = (username, password) => {\n        user.username = username;\n        user.password = password;\n        window.localStorage.setItem(\"spinalhome_cfg\", btoa(JSON.stringify(user)));\n      };\n      factory.get_user = () => {\n        let _user = window.localStorage.getItem(\"spinalhome_cfg\");\n        if (_user) {\n          user = JSON.parse(atob(_user));\n        }\n        return user;\n      };\n      factory.logout = (username, password) => {\n        if (user.username != \"\") {\n          factory.save_user(\"\", \"\");\n          location.reload();\n        }\n      };\n\n      factory.login = (username, password) => {\n        let deferred = $q.defer();\n        let url = \"/get_user_id\";\n        $http.get(url + \"?u=\" + username + \"&p=\" + password)\n          .then(function (data) {\n            var u = parseInt(data.data);\n            var i = 0;\n            if (u == -1) {\n              let msg = (\"Login Error: username / password pair not found.\");\n              // $mdToast.show(loginError_toast)\n              deferred.reject(msg);\n              for (i = 0; i < wait_connectList.length; i++) {\n                wait_connectList[i].reject();\n              }\n              wait_connectList = [];\n              return;\n            }\n            ngSpinalCore.connect(\"http://\" + u + \":\" + password +\n              \"@\" + config.spinalhub_url + \":\" + config.spinalhub_port + \"/\");\n            factory.save_user(username, password);\n            is_Connected = true;\n            deferred.resolve();\n            for (i = 0; i < wait_connectList.length; i++) {\n              wait_connectList[i].resolve();\n            }\n            wait_connectList = [];\n          }, function (data) {\n            let msg = ('Connection Error: Imposible to connect to the server.');\n            // $mdToast.show(connectionError_toast)\n            deferred.reject(msg);\n            for (var i = 0; i < wait_connectList.length; i++) {\n              wait_connectList[i].reject();\n            }\n            wait_connectList = [];\n          });\n        return deferred.promise;\n      };\n\n      factory.is_Connected = () => {\n        return is_Connected;\n      };\n      let wait_connectList = [];\n      factory.wait_connect = () => {\n        let deferred = $q.defer();\n        if (is_Connected == true) {\n          deferred.resolve();\n        } else\n          wait_connectList.push(deferred);\n        return deferred.promise;\n      };\n\n      return factory;\n    }\n  ]);",
    "angular.module('app.services')\n  .factory('goldenLayoutService', ['$q', '$window', '$templateCache', '$rootScope', '$compile',\n    function ($q, $window, $templateCache, $rootScope, $compile) {\n      var config = {\n        content: [{\n          type: 'row',\n          content: [{\n              isClosable: false,\n              title: \"Folder Explorer\",\n              type: 'component',\n              width: 20,\n              componentName: 'SpinalHome',\n              componentState: {\n                template: 'sideBar.html',\n                controller: 'sideBarCtrl'\n              }\n            },\n            {\n              isClosable: false,\n              title: \"File Explorer\",\n              type: 'component',\n              componentName: 'SpinalHome',\n              componentState: {\n                template: 'FileExplorer.html',\n                controller: 'FileExplorerCtrl'\n              }\n            },\n            // {\n            //   isClosable: false,\n            //   title: \"Inspector\",\n            //   type: 'component',\n            //   componentName: 'SpinalHome',\n            //   componentState: {\n            //     template: 'inspector.html',\n            //     controller: 'InspectorCtrl'\n            //   }\n            // }\n\n          ]\n        }]\n      };\n      let myLayout = 0;\n      let factory = {};\n      factory.init = () => {\n        if (myLayout == 0) {\n          myLayout = new GoldenLayout(config, $(\"#g-layout\"));\n          myLayout.registerComponent('SpinalHome', function (container, state) {\n            var element = container.getElement();\n            if (state.template == '') {\n\n              element.html();\n              $compile(element.contents())($rootScope);\n            } else {\n              element.html(\"<div class=\\\"gpanel-content\\\" ng-controller=\\\"\" + state.controller + \"\\\" ng-cloak>\" +\n                $templateCache.get(state.template) + \"</div>\");\n              $compile(element.contents())($rootScope);\n            }\n          });\n\n          myLayout.init();\n          angular.element($window).bind('resize', function () {\n            myLayout.updateSize();\n          });\n          $rootScope.$emit(\"GoldenLayout_READY\");\n        }\n      };\n\n      factory.wait_ready = () => {\n        return $q(function (resolve, reject) {\n          $rootScope.$on(\"GoldenLayout_READY\", () => {\n            resolve();\n          });\n        });\n      };\n\n      factory.createChild = (config) => {\n        myLayout.root.contentItems[0].addChild(config);\n      };\n\n      factory.createDragSource = (element, config) => {\n        myLayout.createDragSource(element, config);\n      };\n\n\n      factory.panels = [];\n      factory.panels_watchers = [];\n      factory.registerPanel = (panel) => {\n        factory.panels.push(panel);\n        for (var i = 0; i < factory.panels_watchers.length; i++) {\n          factory.panels_watchers[i](factory.panels);\n        }\n      };\n      factory.getPanels = () => {\n        return factory.panels;\n      };\n      factory.watch_panel = (fn) => {\n        if (factory.panels_watchers.length === 0) {\n          factory.panels_watchers.push(fn);\n          if (factory.panels.length != 0) {\n            fn(factory.panels);\n          }\n          return;\n        }\n        let found = false;\n        for (var i = 0; i < factory.panels_watchers.length; i++) {\n          if (factory.panels_watchers[i] === fn) {\n            found = true;\n            break;\n          }\n        }\n        if (found === false)\n          factory.panels_watchers.push(fn);\n      };\n\n      return factory;\n    }\n  ])\n  .factory('layout_uid', function () {\n    let uid = 0;\n    return ({\n      get: () => {\n        let id = uid++;\n        return id;\n      }\n    });\n  });",
    "angular.module('app.spinalcom')\n  .factory('ngSpinalCore', ['$q', function ($q) {\n    var service = {};\n    service.conn = 0;\n\n    service.connect = function (option) {\n      service.conn = spinalCore.connect(option);\n    };\n    service.store = function (model, path) {\n      var deferred = $q.defer();\n      spinalCore.store(service.conn, model, path, function (model) {\n        deferred.resolve(model);\n      }, function () {\n        deferred.reject();\n      });\n      return deferred.promise;\n    };\n    service.load = function (path) {\n      var deferred = $q.defer();\n      spinalCore.load(service.conn, path, function (model) {\n        deferred.resolve(model);\n      }, function () {\n        deferred.reject();\n      });\n      return deferred.promise;\n    };\n    service.load_type = function (modelName, callback_success, callback_error) {\n      // var deferred = $q.defer();\n      spinalCore.load_type(service.conn, modelName, function (model) {\n        callback_success(model);\n        // deferred.resolve(model);\n      }, function () {\n        callback_error(model);\n        // deferred.reject();\n      });\n      // return deferred.promise;\n    };\n    service.load_right = function (ptr) {\n      var deferred = $q.defer();\n      spinalCore.load_right(service.conn, ptr, function (model) {\n        deferred.resolve(model);\n      }, function () {\n        deferred.reject();\n      });\n      return deferred.promise;\n    };\n    service.share_model = function (data, filename, flag, target_username) {\n      return spinalCore.share_model(service.conn, data, filename, flag, target_username);\n    };\n    return service;\n  }]);",
    "angular.module('app.spinalcom')\n  .service('spinalFileSystem', [\"$q\", \"spinalModelDictionary\", \"$rootScope\", \"$timeout\", \"goldenLayoutService\",\n    function ($q, spinalModelDictionary, $rootScope, $timeout, goldenLayoutService) {\n      // let this = {};\n      this.current_dir = 0;\n      this.model = 0;\n      this.id = 1;\n      this.folderExplorer_dir = {};\n      let listener_list = {};\n      this.curr_window = 0;\n\n      this.emit_subcriber = (name, arg) => {\n        let listeners = listener_list[name];\n        if (listeners) {\n          for (var i = 0; i < listeners.length; i++) {\n            if (listeners[i])\n              listeners[i](arg);\n          }\n        }\n      };\n      this.subcribe = (name, listener) => {\n        let listeners = listener_list[name];\n        if (!listeners) {\n          listener_list[name] = [];\n          listeners = listener_list[name];\n        }\n        listeners.push(listener);\n        return (() => {\n          let indexOfListener = listeners.indexOf(listener);\n          if (indexOfListener !== -1) {\n            listeners[indexOfListener] = null;\n          }\n        });\n      };\n      this.unsubcribe = (name, listener) => {\n        let listeners = listener_list[name];\n        let indexOfListener = listeners.indexOf(listener);\n        if (indexOfListener !== -1) {\n          listeners[indexOfListener] = null;\n        }\n      };\n\n\n      this.init = () => {\n        return spinalModelDictionary.init().then((m) => {\n          if (this.model == 0) {\n            this.model = m;\n            this.current_dir = m;\n            this.model.bind(() => {\n              this.emit_subcriber(\"SPINAL_FS_ONCHANGE\");\n            });\n          }\n        }, (err) => {\n          //nothing for now\n        });\n      };\n\n      this.ptrRdy_defer = (ptr, promise, isnew = false) => {\n        if (!ptr.data.value || FileSystem._tmp_objects[ptr.data.value]) {\n          setTimeout(() => {\n            this.ptrRdy_defer(ptr, promise, true);\n          }, 200);\n          return;\n        }\n        if (FileSystem._objects[ptr.data.value]) {\n          promise({\n            model: FileSystem._objects[ptr.data.value],\n            firstTime: isnew\n          });\n        } else {\n          ptr.load((m) => {\n            promise({\n              model: m,\n              firstTime: true\n            });\n          });\n        }\n      };\n\n      this.waitPtrRdyAndLoad = (ptr) => {\n        return new Promise((resolve, reject) => {\n          this.ptrRdy_defer(ptr, resolve);\n        });\n      };\n\n      this.load_dir = (f) => {\n        let deferred = $q.defer();\n        this.waitPtrRdyAndLoad(f._ptr).then((res) => {\n          let m = res.model;\n          let firstTime = res.firstTime;\n          if (m) {\n            if (firstTime)\n              m.bind(() => {\n                this.emit_subcriber(\"SPINAL_FS_ONCHANGE\");\n              }, false);\n            deferred.resolve(m);\n          } else\n            deferred.reject();\n        });\n        return deferred.promise;\n      };\n\n      this.deferGetFolderJson_rec = (prom_arr, all_dir, dir, arr, name, parent, opened) => {\n        let deferred = $q.defer();\n        setTimeout(() => {\n          deferred.resolve(this.getFolderJson_rec(all_dir, dir, arr, name, parent, opened));\n        }, 100);\n        return deferred.promise;\n      };\n\n      // {\n      //   id          : \"string\" // required\n      //   parent      : \"string\" // required\n      //   text        : \"string\" // node text\n      //   icon        : \"string\" // string for custom\n      //   state       : {\n      //     opened    : boolean  // is the node open\n      //     disabled  : boolean  // is the node disabled\n      //     selected  : boolean  // is the node selected\n      //   },\n      //   li_attr     : {}  // attributes for the generated LI node\n      //   a_attr      : {}  // attributes for the generated A node\n      // }\n      this.getFolderJson_rec = (all_dir, dir, arr = [], name = 'home', parent = '#', opened = true) => {\n        let current;\n        var prom_arr = [];\n        // search if not existing\n\n        if (!dir._server_id || FileSystem._tmp_objects[dir._server_id]) {\n          return this.deferGetFolderJson_rec(prom_arr, all_dir, dir, arr, name, parent, opened);\n        }\n\n        for (var key in all_dir) {\n          let n = all_dir[key];\n          if (n.model == dir._server_id && n.text == name && n.parent == parent) {\n            current = n;\n            break;\n          }\n        }\n\n        if (!current) { // current not found\n          current = {\n            model: dir._server_id,\n            id: this.id,\n            parent: parent,\n            text: name,\n            state: {\n              opened: opened\n            }\n          };\n          this.id++;\n          if (opened == true ||\n            (typeof all_dir[current.id] != 'undefined' &&\n              all_dir[current.id].state.opened == true)) {\n            current.state.opened = true;\n          }\n        }\n\n        arr.push(current);\n        all_dir[current.id] = current;\n        this.folderExplorer_dir[current.id] = current;\n        let create_callback = (all_dir, arr, f, current) => {\n          return (m) => {\n            return this.getFolderJson_rec(all_dir, m, arr, f.name.get(), current.id, false);\n          };\n        };\n        for (var i = 0; i < dir.length; i++) {\n          let f = dir[i];\n          if (f._info.model_type.get() == 'Directory') {\n            prom_arr.push(this.load_dir(f).then(create_callback(all_dir, arr, f, current)));\n          }\n        }\n        return $q.all(prom_arr).then(() => {\n          return {\n            tree: arr,\n            all_dir: all_dir\n          };\n        });\n      };\n\n      this.onChangeNodeTree = (all_dir, data) => {\n        all_dir[data.node.original.id].state = data.node.state;\n        this.folderExplorer_dir[data.node.original.id].state = data.node.state;\n      };\n\n      this.onbdlclick = (all_dir, data) => {};\n      this.openFolder = (all_dir, node) => {\n        if (this.curr_window && FileSystem._objects[node.original.model]) {\n          this.curr_window.change_curr_dir(FileSystem._objects[node.original.model], this.create_path_with_node(node));\n        }\n\n      };\n      this.openFolderInNewLayer = (all_dir, node) => {\n\n        goldenLayoutService.createChild({\n          isClosable: true,\n          title: \"File Explorer\",\n          type: 'component',\n          componentName: 'SpinalHome',\n          componentState: {\n            template: 'FileExplorer.html',\n            module: 'app.FileExplorer',\n            controller: 'FileExplorerCtrl'\n          }\n        });\n        $timeout(() => {\n          if (this.curr_window && FileSystem._objects[node.original.model]) {\n            this.curr_window.change_curr_dir(FileSystem._objects[node.original.model], this.create_path_with_node(node));\n          }\n        });\n\n      };\n      this.newFolder = (all_dir, data, name) => {\n        let f = FileSystem._objects[data.original.model];\n        if (f) {\n\n          let folder_name = name;\n          let base_folder_name = folder_name.replace(/\\([\\d]*\\)/g, \"\");\n          let x = 0;\n          while (f.has(folder_name)) {\n            folder_name = base_folder_name + '(' + x + ')';\n            x++;\n          }\n          f.add_file(folder_name, new Directory());\n        }\n      };\n      this.FileExplorer_focus = (scope) => {\n        this.curr_window = scope;\n      };\n\n      this.get_node_by_id = (id) => {\n        for (var key in this.folderExplorer_dir) {\n          if (this.folderExplorer_dir[key].id == id)\n            return this.folderExplorer_dir[key];\n        }\n        return 0;\n      };\n      this.create_path_with_node = (data) => {\n        let path = [];\n        let parents = Array.from(data.parents).reverse();\n        // parent =\n        for (var i = 0; i < parents.length; i++) {\n          let parent = parents[i];\n          if (parent == \"#\")\n            continue;\n          let node_parent = this.get_node_by_id(parent);\n          if (node_parent) {\n            path.push({\n              name: node_parent.text,\n              _server_id: node_parent.model\n            });\n          }\n        }\n        path.push({\n          name: data.text,\n          _server_id: data.model\n        });\n        return path;\n      };\n\n      this.select_node = (all_dir, data) => {\n        if (this.curr_window && FileSystem._objects[data.node.original.model]) {\n          this.curr_window.change_curr_dir(FileSystem._objects[data.node.original.model], this.create_path_with_node(data.node));\n        }\n      };\n\n      this.deleteFolder = (all_dir, node) => {\n        let f = FileSystem._objects[node.original.model];\n        if (f) {\n          let parent = all_dir[node.original.parent];\n          if (FileSystem._objects[parent.model]) {\n            let m_parent = FileSystem._objects[parent.model];\n            for (var i = 0; i < m_parent.length; i++) {\n              if (m_parent[i]._ptr.data.value == f._server_id && node.original.text == m_parent[i].name.get()) {\n                m_parent.remove_ref(m_parent[i]);\n                break;\n              }\n            }\n          }\n        }\n      };\n\n      this.handle_FE_progressBar = (model, item) => {\n        if (model._info.model_type.get() === \"Path\") {\n          if (model._info.remaining.get() != 0) {\n            let percent = (model._info.to_upload.get() - model._info.remaining.get()) / model._info.to_upload.get();\n            item.upload_pecent = percent * 100;\n          }\n        } else if (model._info.model_type.get() === \"BIM Project\") {\n          if (model._info.state) {\n            switch (model._info.state.num.get()) {\n              case 0:\n                item.upload_pecent = 10;\n                break;\n              case 1:\n                item.upload_pecent = 18;\n                break;\n              case 2:\n                item.upload_pecent = 36;\n                break;\n              case 3:\n                item.upload_pecent = 54;\n                break;\n              case 4:\n                item.upload_pecent = 72;\n                break;\n              case 5:\n                item.upload_pecent = 80;\n                break;\n              case 6:\n                item.upload_pecent = 90;\n                break;\n              case 7:\n                break;\n              case 8:\n                item.upload_pecent = 100;\n                item.error = true;\n                break;\n              default:\n            }\n          }\n        }\n      };\n\n      this.getFolderFiles = (scope) => {\n        return this.init().then(() => {\n          if (!scope.curr_dir) {\n            scope.curr_dir = this.model;\n            scope.fs_path.push({\n              name: \"home\",\n              _server_id: this.model._server_id\n            });\n          }\n          let create_file_explorer_obj = (model) => {\n            let deferred = $q.defer();\n\n            let wait_tmp_serverid_loop = (deferred, model) => {\n              if (FileSystem._tmp_objects[model._server_id]) {\n                setTimeout(() => {\n                  wait_tmp_serverid_loop(deferred, model);\n                }, 100);\n              } else {\n                let item = {\n                  name: model.name.get(),\n                  model_type: model._info.model_type.get(),\n                  _server_id: model._server_id,\n                  owner: scope.user.username\n                };\n                SpinalDrive_App._getOrCreate_log(model).then((logs) => {\n                  if (logs.length === 0) {\n                    let tab = {\n                      date: Date.now(),\n                      name: scope.user.username,\n                      action: \"1st visit\"\n                    };\n                    SpinalDrive_App._pushLog(logs, tab);\n                  }\n\n                  item.created_at = logs[0].date;\n                  item.log = logs;\n\n                  this.handle_FE_progressBar(model, item);\n                  deferred.resolve(item);\n                });\n              }\n            };\n            wait_tmp_serverid_loop(deferred, model);\n            return deferred.promise;\n          };\n          let q = [];\n          for (var i = 0; i < scope.curr_dir.length; i++) {\n            let f = scope.curr_dir[i];\n            q.push(create_file_explorer_obj(f));\n          }\n          return $q.all(q);\n        });\n      };\n\n      this.getFolderJson = (all_dir) => {\n        return this.init().then(() => {\n          return this.getFolderJson_rec(all_dir, this.model);\n        });\n      };\n\n      this.FE_selected_drag = [];\n      this.FE_init_dir_drag = 0;\n      this.FE_fspath_drag = [];\n      this.FE_visited_scope = [];\n      this.addScopeVisted = (scope) => {\n        for (var i = 0; i < this.FE_visited_scope.length; i++) {\n          if (this.FE_visited_scope[i] == scope)\n            return;\n        }\n        this.FE_visited_scope.push(scope);\n      };\n\n      this.fileSelected = (model_id) => {\n        this.lastfileSelected = model_id;\n        if (this.lastinspector)\n          this.lastinspector.set_model(this.lastfileSelected);\n      };\n      this.setlastInspector = (scope) => {\n        this.lastinspector = scope;\n      };\n\n      return this;\n    }\n  ]);",
    "angular.module('app.spinalcom')\n  .factory('spinalModelDictionary', [\"$q\", \"ngSpinalCore\", \"config\", \"authService\",\n    function ($q, ngSpinalCore, config, authService) {\n      let factory = {};\n      factory.model = 0;\n      factory.users = 0;\n      let _end_ = false;\n      let wait_init = [];\n\n      function reject(params) {\n        for (var i = 0; i < wait_init.length; i++) {\n          wait_init[i].reject(params);\n        }\n      }\n\n      function resolve(params) {\n        for (var i = 0; i < wait_init.length; i++) {\n          wait_init[i].resolve(params);\n        }\n      }\n\n\n      factory.init = () => {\n        return authService.wait_connect().then(() => {\n          var deferred = $q.defer();\n          if (factory.users == 0) {\n            wait_init.push(deferred);\n            if (wait_init.length === 1) {\n              let user = authService.get_user();\n              // ngSpinalCore.connect(\"http://\" + config.spinalhub_user + \":\" + config.spinalhub_pass +\n              //   \"@\" + config.spinalhub_url + \":\" + config.spinalhub_port + '/')\n              ngSpinalCore.load(\"/__users__/\" + user.username).then((m) => {\n                factory.model = m;\n                return ngSpinalCore.load(\"/etc/users\");\n                // deferred.resolve(m);\n              }, () => {\n                let msg = \"not able to load : \" + \"/__users__/\" + user.username;\n                console.error(msg);\n                // deferred.reject(msg);\n                reject(msg);\n              }).then((u) => {\n                factory.users = u;\n                _end_ = false;\n                // deferred.resolve(factory.model);\n                resolve(factory.model);\n              }, () => {\n                let msg = \"not able to load : \" + \"/etc/users\";\n                console.error(msg);\n                reject(msg);\n                // deferred.reject(msg);\n              });\n            }\n          } else\n            deferred.resolve(factory.model);\n          return deferred.promise;\n        }, () => {\n          let msg = \"not able to load : \" + \"/__users__/\" + user.username;\n          console.error(msg);\n          reject(msg);\n          // deferred.reject(msg);\n        });\n      };\n      return factory;\n    }\n  ]);"
  ]
}